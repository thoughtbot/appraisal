require 'spec_helper'
require 'appraisal/utils'

describe 'CLI' do
  context 'appraisal (with no arguments)' do
    it 'runs install command' do
      build_appraisal_file <<-Appraisal
        appraise '1.0.0' do
          gem 'dummy', '1.0.0'
        end
      Appraisal

      run_simple 'appraisal'

      expect(file 'gemfiles/1.0.0.gemfile').to be_exists
      expect(file 'gemfiles/1.0.0.gemfile.lock').to be_exists
    end
  end

  context 'appraisal (with arguments)' do
    before do
      build_appraisal_file <<-Appraisal
        appraise '1.0.0' do
          gem 'dummy', '1.0.0'
        end

        appraise '1.1.0' do
          gem 'dummy', '1.1.0'
        end
      Appraisal

      run_simple 'appraisal install'
      write_file 'test.rb', 'puts "Running: #{$dummy_version}"'
    end

    it 'sets APPRAISAL_INITIALIZED environment variable' do
      write_file 'test.rb', <<-TEST_FILE.strip_heredoc
        if ENV['APPRAISAL_INITIALIZED']
          puts "Appraisal initialized!"
        end
      TEST_FILE

      test_command = 'appraisal 1.0.0 ruby -rbundler/setup -rdummy test.rb'
      run_simple test_command
      expect(output_from test_command).to include 'Appraisal initialized!'
    end

    context 'with appraisal name' do
      it 'runs the given command against a correct versions of dependency' do
        test_command = 'appraisal 1.0.0 ruby -rbundler/setup -rdummy test.rb'
        run_simple test_command

        expect(output_from test_command).to include 'Running: 1.0.0'
        expect(output_from test_command).to_not include 'Running: 1.1.0'
      end
    end

    context 'without appraisal name' do
      it 'runs the given command against all versions of dependency' do
        test_command = 'appraisal ruby -rbundler/setup -rdummy test.rb'
        run_simple test_command

        expect(output_from test_command).to include 'Running: 1.0.0'
        expect(output_from test_command).to include 'Running: 1.1.0'
      end
    end
  end

  context 'appraisal generate' do
    it 'generates the gemfiles' do
      build_appraisal_file <<-Appraisal
        appraise '1.0.0' do
          gem 'dummy', '1.0.0'
        end

        appraise '1.1.0' do
          gem 'dummy', '1.1.0'
        end
      Appraisal

      run_simple 'appraisal generate'

      expect(file 'gemfiles/1.0.0.gemfile').to be_exists
      expect(file 'gemfiles/1.1.0.gemfile').to be_exists
      expect(content_of 'gemfiles/1.0.0.gemfile').to eq <<-gemfile.strip_heredoc
        # This file was generated by Appraisal

        source "https://rubygems.org"

        gem "appraisal", :path=>"#{PROJECT_ROOT}"
        gem "dummy", "1.0.0"
      gemfile
    end
  end

  context 'appraisal install' do
    it 'installs the dependencies' do
      build_appraisal_file <<-Appraisal
        appraise '1.0.0' do
          gem 'dummy', '1.0.0'
        end

        appraise '1.1.0' do
          gem 'dummy', '1.1.0'
        end
      Appraisal

      run_simple 'appraisal install'

      expect(file 'gemfiles/1.0.0.gemfile.lock').to be_exists
      expect(file 'gemfiles/1.1.0.gemfile.lock').to be_exists
    end

    it 'relativize directory in gemfile.lock' do
      build_gemspec
      add_gemspec_to_gemfile
      build_appraisal_file <<-Appraisal
        appraise '1.0.0' do
          gem 'dummy', '1.0.0'
        end
      Appraisal

      run_simple 'appraisal install'

      expect(content_of 'gemfiles/1.0.0.gemfile.lock').not_to include current_dir
    end

    context 'with job size', parallel: true do
      before do
        build_appraisal_file <<-Appraisal
          appraise '1.0.0' do
            gem 'dummy', '1.0.0'
          end
        Appraisal
      end

      it 'accepts --jobs option to set job size' do
        run_simple 'appraisal install --jobs=2'

        expect(output_from 'appraisal install --jobs=2').to include
          'bundle install --gemfile=gemfiles/1.0.0.gemfile --jobs=2'
      end

      it 'ignores --jobs option if the job size is less than or equal to 1' do
        run_simple 'appraisal install --jobs=0'

        expect(output_from 'appraisal install --jobs=0').not_to include
          'bundle install --gemfile=gemfiles/1.0.0.gemfile'
        expect(output_from 'appraisal install --jobs=0').not_to include
          'bundle install --gemfile=gemfiles/1.0.0.gemfile --jobs=0'
        expect(output_from 'appraisal install --jobs=0').not_to include
          'bundle install --gemfile=gemfiles/1.0.0.gemfile --jobs=1'
      end
    end
  end

  context 'appraisal clean' do
    it 'remove all gemfiles from gemfiles directory' do
      build_appraisal_file <<-Appraisal
        appraise '1.0.0' do
          gem 'dummy', '1.0.0'
        end
      Appraisal

      run_simple 'appraisal install'
      write_file 'gemfiles/non_related_file', ''

      run_simple 'appraisal clean'

      expect(file 'gemfiles/1.0.0.gemfile').not_to be_exists
      expect(file 'gemfiles/1.0.0.gemfile.lock').not_to be_exists
      expect(file 'gemfiles/non_related_file').to be_exists
    end
  end

  context 'appraisal update' do
    before do
      build_gem 'dummy2', '1.0.0'

      build_appraisal_file <<-Appraisal
        appraise 'dummy' do
          gem 'dummy', '~> 1.0.0'
          gem 'dummy2', '~> 1.0.0'
        end
      Appraisal

      run_simple 'appraisal install'
      build_gem 'dummy', '1.0.1'
      build_gem 'dummy2', '1.0.1'
    end

    after do
      in_current_dir do
        `gem uninstall dummy -v 1.0.1`
        `gem uninstall dummy2 -a`
      end
    end

    context 'with no arguments' do
      it 'updates all the gems' do
        run_simple 'appraisal update'

        expect(content_of 'gemfiles/dummy.gemfile.lock').to include 'dummy (1.0.1)'
        expect(content_of 'gemfiles/dummy.gemfile.lock').to include 'dummy2 (1.0.1)'
      end
    end

    context 'with a list of gems' do
      it 'only updates specified gems' do
        run_simple 'appraisal update dummy'

        expect(content_of 'gemfiles/dummy.gemfile.lock').to include 'dummy (1.0.1)'
        expect(content_of 'gemfiles/dummy.gemfile.lock').to include 'dummy2 (1.0.0)'
      end
    end
  end

  context 'appraisal help' do
    it 'prints usage along with commands, and list of appraisals' do
      build_appraisal_file <<-Appraisal
        appraise '1.0.0' do
          gem 'dummy', '1.0.0'
        end
      Appraisal

      run_simple 'appraisal help'

      expect(output_from 'appraisal help').to include 'Usage:'
      expect(output_from 'appraisal help').to include 'appraisal [APPRAISAL_NAME] EXTERNAL_COMMAND'
      expect(output_from 'appraisal help').to include '1.0.0'
    end
  end
end
